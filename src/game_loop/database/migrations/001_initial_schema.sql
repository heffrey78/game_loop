-- Initial schema for game_loop database
-- Implements the core tables needed for the game loop functionality
-- Based on schema documentation at: /docs/database/schema.md

-- Enable required extensions
-- Note: pgvector extension should already be installed by Dockerfile/init_db.py
-- We only create the UUID extension here to avoid errors with pgvector
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
-- We'll skip creating pgvector extension here as it's already handled

-- Create tables with explicit foreign key constraints
-- World Structure: Regions represent the highest level of world organization
-- See architecture diagram: regions are part of the World State Tracker
CREATE TABLE regions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    description TEXT NOT NULL,
    theme VARCHAR(50),
    parent_region_id UUID,
    region_embedding VECTOR(384), -- 384-dimension vector as defined in embedding_pipeline.md
    FOREIGN KEY (parent_region_id) REFERENCES regions(id) ON DELETE SET NULL
);

-- Locations: Areas within regions that players can visit and explore
-- Core component in the spatial graph relationships
CREATE TABLE locations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    short_desc TEXT NOT NULL,
    full_desc TEXT NOT NULL,
    region_id UUID,
    location_type VARCHAR(50) NOT NULL,
    is_dynamic BOOLEAN NOT NULL DEFAULT false, -- Dynamic locations are generated by the DynamicWorldGenerator
    discovery_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(50) NOT NULL,
    state_json JSONB DEFAULT '{}'::jsonb, -- JSONB for flexible state storage
    location_embedding VECTOR(384), -- For semantic search of locations
    FOREIGN KEY (region_id) REFERENCES regions(id) ON DELETE SET NULL
);

-- Location Connections: Implements the graph database pattern from the tech stack
-- Represents the spatial navigation network as shown in architecture diagram
CREATE TABLE location_connections (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    source_id UUID NOT NULL,
    target_id UUID NOT NULL,
    connection_type VARCHAR(50) NOT NULL,
    direction VARCHAR(20),
    requirements_json JSONB DEFAULT '{}'::jsonb, -- Requirements to traverse the connection
    description TEXT,
    is_hidden BOOLEAN NOT NULL DEFAULT false,
    state_json JSONB DEFAULT '{}'::jsonb,
    FOREIGN KEY (source_id) REFERENCES locations(id) ON DELETE CASCADE,
    FOREIGN KEY (target_id) REFERENCES locations(id) ON DELETE CASCADE
);

-- Players: User-controlled characters in the game
-- Core entity in the PlayerStateTracker component
CREATE TABLE players (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    username VARCHAR(50) NOT NULL UNIQUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP,
    settings_json JSONB DEFAULT '{}'::jsonb, -- Player preferences
    current_location_id UUID,
    FOREIGN KEY (current_location_id) REFERENCES locations(id) ON DELETE SET NULL
);

-- NPCs: Non-player characters that inhabit the world
-- Used by NPCBehaviorEngine in the world evolution system
CREATE TABLE npcs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    short_desc TEXT NOT NULL,
    full_desc TEXT NOT NULL,
    npc_type VARCHAR(50) NOT NULL,
    personality_json JSONB DEFAULT '{}'::jsonb, -- NPC personality traits
    knowledge_json JSONB DEFAULT '{}'::jsonb, -- What the NPC knows
    location_id UUID,
    state_json JSONB DEFAULT '{}'::jsonb,
    npc_embedding VECTOR(384), -- For semantic matching with player queries
    FOREIGN KEY (location_id) REFERENCES locations(id) ON DELETE SET NULL
);

-- Objects: Items and interactive elements in the game world
-- Used by the ObjectInteractionProcessor
CREATE TABLE objects (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    short_desc TEXT NOT NULL,
    full_desc TEXT NOT NULL,
    object_type VARCHAR(50) NOT NULL,
    properties_json JSONB DEFAULT '{}'::jsonb, -- Object properties
    is_takeable BOOLEAN NOT NULL DEFAULT false, -- Whether can be taken by player
    location_id UUID,
    state_json JSONB DEFAULT '{}'::jsonb,
    object_embedding VECTOR(384), -- For semantic similarity searches
    FOREIGN KEY (location_id) REFERENCES locations(id) ON DELETE SET NULL
);

-- Player inventory: Objects owned by players
CREATE TABLE player_inventory (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    player_id UUID NOT NULL,
    object_id UUID NOT NULL,
    quantity INTEGER NOT NULL DEFAULT 1,
    acquired_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    state_json JSONB DEFAULT '{}'::jsonb, -- Item state in inventory
    FOREIGN KEY (player_id) REFERENCES players(id) ON DELETE CASCADE,
    FOREIGN KEY (object_id) REFERENCES objects(id) ON DELETE CASCADE
);

-- Player knowledge: Information discovered by players
-- Part of the player state tracking system
CREATE TABLE player_knowledge (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    player_id UUID NOT NULL,
    knowledge_key VARCHAR(100) NOT NULL,
    knowledge_value TEXT NOT NULL,
    discovered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    knowledge_embedding VECTOR(384), -- For semantic knowledge retrieval
    FOREIGN KEY (player_id) REFERENCES players(id) ON DELETE CASCADE
);

-- Player skills: Abilities and skill levels
CREATE TABLE player_skills (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    player_id UUID NOT NULL,
    skill_name VARCHAR(50) NOT NULL,
    skill_level INTEGER NOT NULL DEFAULT 1,
    skill_description TEXT,
    skill_category VARCHAR(50),
    FOREIGN KEY (player_id) REFERENCES players(id) ON DELETE CASCADE
);

-- Player history: Events and actions performed by players
-- Used by the PlayerHistoryModel in the architecture
CREATE TABLE player_history (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    player_id UUID NOT NULL,
    event_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    event_type VARCHAR(50) NOT NULL,
    event_data JSONB DEFAULT '{}'::jsonb, -- Event details
    location_id UUID,
    event_embedding VECTOR(384), -- For semantic search of past events
    FOREIGN KEY (player_id) REFERENCES players(id) ON DELETE CASCADE,
    FOREIGN KEY (location_id) REFERENCES locations(id) ON DELETE SET NULL
);

-- Quests: Tasks and adventures for players
-- Managed by QuestProgressionSystem and QuestGenerator
CREATE TABLE quests (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title VARCHAR(100) NOT NULL,
    description TEXT NOT NULL,
    quest_type VARCHAR(50) NOT NULL,
    status VARCHAR(30) NOT NULL DEFAULT 'available',
    requirements_json JSONB DEFAULT '{}'::jsonb, -- Prerequisites
    steps_json JSONB NOT NULL, -- Quest milestones
    rewards_json JSONB DEFAULT '{}'::jsonb, -- Rewards on completion
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_dynamic BOOLEAN NOT NULL DEFAULT false, -- Whether generated by QuestGenerator
    quest_embedding VECTOR(384) -- For finding thematically similar quests
);

-- Player quest progress: Tracks player advancement through quests
CREATE TABLE player_quest_progress (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    player_id UUID NOT NULL,
    quest_id UUID NOT NULL,
    status VARCHAR(30) NOT NULL DEFAULT 'in_progress',
    current_step INTEGER NOT NULL DEFAULT 0,
    progress_data JSONB DEFAULT '{}'::jsonb, -- Detailed progress info
    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    completed_at TIMESTAMP,
    FOREIGN KEY (player_id) REFERENCES players(id) ON DELETE CASCADE,
    FOREIGN KEY (quest_id) REFERENCES quests(id) ON DELETE CASCADE
);

-- NPC relationships: How NPCs relate to players, other NPCs, and factions
-- Part of the interactive relationships graph pattern
CREATE TABLE npc_relationships (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    npc_id UUID NOT NULL,
    target_type VARCHAR(30) NOT NULL,
    target_id UUID NOT NULL,
    relationship_type VARCHAR(50) NOT NULL,
    value INTEGER NOT NULL DEFAULT 0, -- Relationship value (-100 to 100)
    history_json JSONB DEFAULT '{}'::jsonb, -- Interaction history
    FOREIGN KEY (npc_id) REFERENCES npcs(id) ON DELETE CASCADE
);

-- Object interactions: How objects can be used and interacted with
-- Used by the ObjectInteractionProcessor
CREATE TABLE object_interactions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    object_id UUID NOT NULL,
    interaction_type VARCHAR(50) NOT NULL,
    effect_json JSONB NOT NULL, -- Effects of the interaction
    requirements_json JSONB DEFAULT '{}'::jsonb, -- Requirements to interact
    description TEXT,
    FOREIGN KEY (object_id) REFERENCES objects(id) ON DELETE CASCADE
);

-- Game sessions: Tracks player gameplay sessions
-- Managed by the SessionManager component
CREATE TABLE game_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    player_id UUID NOT NULL,
    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ended_at TIMESTAMP,
    game_time INTEGER NOT NULL DEFAULT 0, -- In-game time (minutes)
    save_data BYTEA, -- Serialized save data
    session_summary TEXT,
    FOREIGN KEY (player_id) REFERENCES players(id) ON DELETE CASCADE
);

-- World rules: Game mechanics and world behaviors
-- Part of the RulesEngine and DynamicRulesSystem
CREATE TABLE world_rules (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    rule_name VARCHAR(100) NOT NULL,
    rule_description TEXT NOT NULL,
    rule_type VARCHAR(30) NOT NULL, -- Static or dynamic
    created_by VARCHAR(50) NOT NULL, -- System or player ID
    rule_logic TEXT NOT NULL, -- Rule implementation logic
    rule_embedding VECTOR(384) -- For finding semantically similar rules
);

-- Evolution events: Scheduled world changes
-- Used by the EvolutionProcessor component
CREATE TABLE evolution_events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    event_type VARCHAR(50) NOT NULL,
    target_type VARCHAR(30) NOT NULL, -- Location, NPC, object, etc.
    target_id UUID NOT NULL,
    scheduled_time INTEGER NOT NULL, -- Game time when it triggers
    priority INTEGER NOT NULL DEFAULT 0,
    conditions_json JSONB DEFAULT '{}'::jsonb, -- Triggering conditions
    effects_json JSONB NOT NULL, -- Event effects
    is_processed BOOLEAN NOT NULL DEFAULT false
);

-- Create indexes for vector search as specified in the tech stack
-- These enable the semantic search capabilities
CREATE INDEX locations_embedding_idx ON locations USING ivfflat (location_embedding vector_cosine_ops);
CREATE INDEX objects_embedding_idx ON objects USING ivfflat (object_embedding vector_cosine_ops);
CREATE INDEX npcs_embedding_idx ON npcs USING ivfflat (npc_embedding vector_cosine_ops);
CREATE INDEX player_knowledge_embedding_idx ON player_knowledge USING ivfflat (knowledge_embedding vector_cosine_ops);
CREATE INDEX player_history_embedding_idx ON player_history USING ivfflat (event_embedding vector_cosine_ops);
CREATE INDEX quests_embedding_idx ON quests USING ivfflat (quest_embedding vector_cosine_ops);
CREATE INDEX world_rules_embedding_idx ON world_rules USING ivfflat (rule_embedding vector_cosine_ops);

-- Create indexes for frequent lookups as recommended in the schema documentation
CREATE INDEX player_inventory_player_idx ON player_inventory (player_id);
CREATE INDEX npcs_location_idx ON npcs (location_id);
CREATE INDEX objects_location_idx ON objects (location_id);
CREATE INDEX locations_region_idx ON locations (region_id);
CREATE INDEX player_knowledge_player_idx ON player_knowledge (player_id);
CREATE INDEX player_skills_player_idx ON player_skills (player_id);
CREATE INDEX player_history_player_idx ON player_history (player_id);
CREATE INDEX location_connections_source_idx ON location_connections (source_id);
CREATE INDEX location_connections_target_idx ON location_connections (target_id);
